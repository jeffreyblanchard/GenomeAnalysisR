import_biom(rich_dense_biom, treefilename, refseqfilename, parseFunction=parse_taxonomy_greengenes)
import_biom(rich_sparse_biom, treefilename, refseqfilename, parseFunction=parse_taxonomy_greengenes)
import_biom(min_dense_biom, treefilename, refseqfilename, parseFunction=parse_taxonomy_greengenes)
import_biom(min_sparse_biom, treefilename, refseqfilename, parseFunction=parse_taxonomy_greengenes)
library("doParallel")
import_biom("my/file/path/file.biom", #parseFunction=parse_taxonomy_greengenes, parallel=TRUE)
)
myData = import_biom(rich_dense_biom, treefilename, refseqfilename, parseFunction=parse_taxonomy_greengenes)
plot_tree(myData, color="Genus", shape="BODY_SITE", size="abundance")
plot_richness(myData, x="BODY_SITE", color="Description")
plot_bar(myData, fill="Genus")
refseq(myData)
data(GlobalPatterns)
GlobalPatterns
myTaxa = taxa_names(GlobalPatterns)[1:10]
plot(phy_tree(prune_taxa(myTaxa, GlobalPatterns)))
GPr  = transform_sample_counts(GlobalPatterns, function(x) x / sum(x) )
GPfr = filter_taxa(GPr, function(x) var(x) > 1e-5, TRUE)
GP.chl = subset_taxa(GlobalPatterns, Phylum=="Chlamydiae")
GP.chl = prune_samples(sampleSums(GP.chl)>=20, GP.chl)
GP.chl = subset_taxa(GlobalPatterns, Phylum=="Chlamydiae")
GP.chl = prune_samples(sample_sums(GP.chl)>=20, GP.chl)
GP.chl.merged = merge_taxa(GP.chl, taxa_names(GP.chl)[1:5])
gpsfb = subset_taxa(GPfr, Phylum == "Bacteroidetes")
gpsfbg = tax_glom(gpsfb, "Family")
plot_tree(gpsfbg, color="SampleType", shape="Class", size="abundance")
transform_sample_counts(GP.chl, function(OTU) OTU/sum(OTU) )
GP = filter_taxa(GlobalPatterns, function(x) sum(x > 3) > (0.2*length(x)), TRUE)
sample_data(GP)$human = factor( get_variable(GP, "SampleType") %in% c("Feces", "Mock", "Skin", "Tongue") )
total = median(sample_sums(GP))
standf = function(x, t=total) round(t * (x / sum(x)))
gps = transform_sample_counts(GP, standf)
gpsf = filter_taxa(gps, function(x) sd(x)/mean(x) > 3.0, TRUE)
gpsfb = subset_taxa(gpsf, Phylum=="Bacteroidetes")
title = "plot_bar; Bacteroidetes-only"
plot_bar(gpsfb, "SampleType", "Abundance", title=title)
plot_bar(gpsfb, "SampleType", "Abundance", "Family", title=title)
plot_bar(gpsfb, "Family", "Abundance", "Family",
title=title, facet_grid="SampleType~.")
data(enterotype)
enterotype <- subset_species(enterotype, Genus != "-1")
enterotype <- subset_taxa(enterotype, Genus != "-1")
dist_methods <- unlist(distance("list"))
print(dist_methods)
phyloseq::distance("list")
require("phyloseq")
dist_methods <- unlist(distance("list"))
unw_pcoa_dm <- phyloseq::distance(pso, "uunifrac")
unlist(distance("list"))
library("phyloseq")
packageVersion("phyloseq")
unlist(distance("list"))
phyloseq::distance("list")
unw_pcoa_dm <- phyloseq::distance(pso, "uunifrac")
detach("package:DESeq2", unload=TRUE)
detach("package:DESeq2", unload=TRUE)
> detach("package:DESeq2", unload=TRUE)
Error in detach("package:DESeq2", unload = TRUE) :
invalid 'name' argument
library("ggplot2")
library("phyloseq")
unlist(distance("list"))
detach("package:DESeq2", unload=TRUE)
library(DESeq2)
unlist(distance("list"))
unlist(distance("list"))
library("phyloseq")
unlist(distance("list"))
library("vegan")
library("ggplot2")
library("phyloseq")
theme_set(theme_bw())
data(GlobalPatterns)
GP <- prune_taxa(taxa_sums(GlobalPatterns) > 0, GlobalPatterns)
human <- get_variable(GP, "SampleType") %in% c("Feces", "Mock", "Skin", "Tongue")
sample_data(GP)$human <- factor(human)
sample_data(GP)$human
GP
sample_date()
sample_data()
GP.sample_data()
GP.sample_data
nsamples(GP)
rank_names(GP)
ta_table(GP)
tax_table(GP)
tax_table(GP)[1:5, 1:4]
taxa_names(GP)
theme_set(theme_bw())
data(GlobalPatterns)
GP <- prune_taxa(taxa_sums(GlobalPatterns) > 0, GlobalPatterns)
# Define a human-associated versus non-human categorical variable:
human <- get_variable(GP, "SampleType") %in% c("Feces", "Mock", "Skin", "Tongue")
# Add new human variable to sample data:
sample_data(GP)$human <- factor(human)
alpha_meas = c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson")
(p <- plot_richness(GP, "human", "SampleType", measures=alpha_meas))
p + geom_boxplot(data=p$data, aes(x=human, y=value, color=NULL), alpha=0.1)
GP.chl <- subset_taxa(GP, Phylum=="Crenarchaeota")
plot_tree(GP.chl, color="SampleType", shape="Family", label.tips="Genus", size="Abundance")
plot_tree(GP.chl, color="SampleType", shape="Family", label.tips="Genus", size="Abundance")
data(enterotype)
par(mar = c(10, 4, 4, 2) + 0.1) # make more room on bottom margin
N <- 30
barplot(sort(taxa_sums(enterotype), TRUE)[1:N]/nsamples(enterotype), las=2)
rank_names(enterotype)
TopNOTUs <- names(sort(taxa_sums(enterotype), TRUE)[1:10])
ent10   <- prune_taxa(TopNOTUs, enterotype)
print(ent10)
sample_variables(ent10)
plot_bar(ent10, "SeqTech", fill="Enterotype", facet_grid=~Genus)
data("GlobalPatterns")
gpac <- subset_taxa(GlobalPatterns, Phylum=="Crenarchaeota")
(p <- plot_heatmap(gpac, "NMDS", "bray", "SampleType", "Family"))
p$scales$scales[[1]]$name <- "My X-Axis"
p$scales$scales[[2]]$name <- "My Y-Axis"
print(p)
data(enterotype)
plot_net(enterotype, maxdist=0.4, color="SeqTech", shape="Enterotype")
my.physeq <- import("Biom", BIOMfilename="myBiomFile.biom")
my.ord    <- ordinate(my.physeq)
plot_ordination(my.physeq, my.ord, color="myFavoriteVarible")
my.physeq <- import("Biom", BIOMfilename="myBiomFile.biom")
my.ord    <- ordinate(my.physeq)
plot_ordination(my.physeq, my.ord, color="myFavoriteVarible")
my.physeq <- import("Biom", BIOMfilename="myBiomFile.biom")
my.physeq <- import("Biom", BIOMfilename="myBiomFile.biom")
data(GlobalPatterns)
GPUF <- UniFrac(GlobalPatterns)
load(system.file("doc", "Unweighted_UniFrac.RData", package="phyloseq"))
GloPa.pcoa = ordinate(GlobalPatterns, method="PCoA", distance=GPUF)
plot_scree(GloPa.pcoa, "Scree plot for Global Patterns, UniFrac/PCoA")
(p12 <- plot_ordination(GlobalPatterns, GloPa.pcoa, "samples", color="SampleType") +
geom_point(size=5) + geom_path() + scale_colour_hue(guide = FALSE) )
(p13 <- plot_ordination(GlobalPatterns, GloPa.pcoa, "samples", axes=c(1, 3),
color="SampleType") + geom_line() + geom_point(size=5) )
data(GlobalPatterns)
load(system.file("doc", "Unweighted_UniFrac.RData", package="phyloseq"))
# perform NMDS, set to 2 axes
GP.NMDS <- ordinate(GlobalPatterns, "NMDS", GPUF)
(p <- plot_ordination(GlobalPatterns, GP.NMDS, "samples", color="SampleType") +
geom_line() + geom_point(size=5) )
data(GlobalPatterns)
# Take a subset of the GP dataset, top 200 species
topsp <- names(sort(taxa_sums(GlobalPatterns), TRUE)[1:200])
GP    <- prune_taxa(topsp, GlobalPatterns)
# Subset further to top 5 phyla, among the top 200 OTUs.
top5ph <- sort(tapply(taxa_sums(GP), tax_table(GP)[, "Phylum"], sum), decreasing=TRUE)[1:5]
GP     <- subset_taxa(GP, Phylum %in% names(top5ph))
# Re-add human variable to sample data:
sample_data(GP)$human <- factor(human)
# Now perform a unconstrained correspondence analysis
gpca  <- ordinate(GP, "CCA")
# Scree plot
plot_scree(gpca, "Scree Plot for Global Patterns Correspondence Analysis")
(p12 <- plot_ordination(GP, gpca, "samples", color="SampleType") +
geom_line() + geom_point(size=5) )
(p34 <- plot_ordination(GP, gpca, "samples", axes=c(3, 4), color="SampleType") +
geom_line() + geom_point(size=5) )
p1  <- plot_ordination(GP, gpca, "species", color="Phylum")
(p1 <- ggplot(p1$data, p1$mapping) + geom_point(size=5, alpha=0.5) +
facet_wrap(~Phylum) +  scale_colour_hue(guide = FALSE) )
library("vegan")
library("ggplot2")
library("phyloseq")
theme_set(theme_bw())
data(GlobalPatterns)
GP <- prune_taxa(taxa_sums(GlobalPatterns) > 0, GlobalPatterns)
# Define a human-associated versus non-human categorical variable:
human <- get_variable(GP, "SampleType") %in% c("Feces", "Mock", "Skin", "Tongue")
# Add new human variable to sample data:
sample_data(GP)$human <- factor(human)
alpha_meas = c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson")
(p <- plot_richness(GP, "human", "SampleType", measures=alpha_meas))
p + geom_boxplot(data=p$data, aes(x=human, y=value, color=NULL), alpha=0.1)
GP
GP$tax_table()
str(GP)
class(GP$tax_table)
class(GP)
str(GP)
attributes(GP)
str(GP)
attributes(enterotype)
str(enterotype)
plot_tree(Enterotype, color="SampleType", shape="Family", label.tips="Genus", size="Abundance")
str(Enterotype)
str(enterotype)
plot_tree(enterotype, color="SampleType", shape="Family", label.tips="Genus", size="Abundance")
alpha_meas = c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson")
(p <- plot_richness(enterotype, "human", "SampleType", measures=alpha_meas))
alpha_meas = c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson")
(p <- plot_richness(GP, "human", "SampleType", measures=alpha_meas))
enterotype_prune <- prune_taxa(taxa_sums(enterotype) > 0, enterotype)
alpha_meas = c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson")
(p <- plot_richness(enterotype_prune, "human", "SampleType", measures=alpha_meas))
plot_tree(GP.chl, color="SampleType", shape="Family", label.tips="Genus", size="Abundance")
atiributes(GP)
attributes(GP)
GP.thau <- subset_taxa(GP, Order=="Thaumarchaeota")
plot_tree(GP.thau, color="SampleType", shape="Family", label.tips="Genus", size="Abundance")
GP.thau <- subset_taxa(GP, Class=="Thaumarchaeota")
plot_tree(GP.thau, color="SampleType", shape="Family", label.tips="Genus", size="Abundance")
plot_tree(GP.thau, color="SampleType", shape="Family", label.tips="Genus", size="Abundance")
plot_tree(GP.thau, color="SampleType", shape="Family", label.tips="Genus", size="Abundance")
plot_tree(GP.thau)
plot_tree(GP.thau, label.tips="Species")
plot_tree(GP.thau, label.tips="Families")
plot_tree(GP.thau, label.tips="Family")
plot_tree(GP.thau, color="SampleType", label.tips="Family", size="Abundance")
GP.firm <- subset_taxa(GP, Class=="Firmicutes")
plot_frim(GP.thau, color="SampleType", label.tips="Family", size="Abundance")
GP.firm <- subset_taxa(GP, Class=="Firmicutes")
plot_tree(GP.firm, color="SampleType", label.tips="Family", size="Abundance")
GP.firm <- subset_taxa(GP, Class=="Firmicute")
attributes(GP)
GP.firm <- subset_taxa(GP, Phylum=="Firmicute")
GP.firm <- subset_taxa(GP, Phylum=="firmicutes")
GP.firm <- subset_taxa(GP, Phylum=="Firmicutes")
plot_tree(GP.firm, color="SampleType", label.tips="Family", size="Abundance")
str(GP.firm)
ggplot(data = GP.firm) +
geom_bar(mapping = aes(x = Family))
exit
quit()
library(phyloseq)
library(ggplot2)
data(GlobalPatterns)
GP <- prune_taxa(taxa_sums(GlobalPatterns) > 0, GlobalPatterns)
GP.chl <- subset_taxa(GP, Phylum=="Firmicutes")
plot_bar(GP.chl, "Class", fill="order", facet_grid=~Sampletype)
data(GlobalPatterns)
GP <- prune_taxa(taxa_sums(GlobalPatterns) > 0, GlobalPatterns)
human <- get_variable(GP, "SampleType") %in% c("Feces", "Mock", "Skin", "Tongue")
sample_data(GP)$human <- factor(human)
GP.chl <- subset_taxa(GP, Phylum=="Firmicutes")
plot_bar(GP.chl, "Class", fill="order", facet_grid=~Sampletype)
data(GlobalPatterns)
GP <- prune_taxa(taxa_sums(GlobalPatterns) > 0, GlobalPatterns)
human <- get_variable(GP, "SampleType") %in% c("Feces", "Mock", "Skin", "Tongue")
sample_data(GP)$human <- factor(human)
GP.firm <- subset_taxa(GP, Phylum=="Firmicutes")
plot_bar(GP.firm)
plot_bar(GP.firm, "Class", fill="Order", facet_grid=~SampleType)
library(phyloseq)
library(ggplot2)
data(GlobalPatterns)
GP <- prune_taxa(taxa_sums(GlobalPatterns) > 0, GlobalPatterns)
human <- get_variable(GP, "SampleType") %in% c("Feces", "Mock", "Skin", "Tongue")
sample_data(GP)$human <- factor(human)
GP.firm <- subset_taxa(GP, Phylum=="Firmicutes")
plot_bar(GP.firm, "Class", fill="Order", facet_grid=~SampleType)
mtscaled <- as.matrix(scale(mtcars))
heatmap(mtscaled, Colv=F, scale='none')
x = 3
plot(cars)
plot(car)
plot(cars)
plot(cars)
clear()
x = 3
plot(cars)
3 + 3
x = 3
plot(cars)
3 + 4
3 + 5
Y = 20
Y = 20
X = 12
X+Y
plot(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
x = 3
y = "test"
gene 1 = "tac"
gene_1 = "tac"
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("airway", "Rsamtools", "GenomicFeatures", "DESeq2", "gplots", "RColorBrewer", "PoiClaClu", "AnnotationDbi", "org.Hs.eg.db", "Gviz", "sva"))
library("airway")
dir <- system.file("extdata", package="airway", mustWork=TRUE)
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("GenomicFeatures")
)
summary(cars)
SNPs <- c("AA", "AA", "GG", "AG", "AG", "AA","AG", "AA", "AA", "AA", "AG")
SNPs
table(SNPs_cat)
SNPs_cat <- factor(SNPs)
table(SNPs_cat)
microbiome_A <- read.table("ubiome-export-personA.csv", header = TRUE, sep = ",")
microbiome_B <- read.table("ubiome-export-personB.csv", header = TRUE, sep = ",")
microbiome_C <- read.table("ubiome-export-personC.csv", header = TRUE, sep = ",")
microbiome_A <- subset(microbiome_A, select = -c(count, taxon, parent, tax_rank))
str(microbiome_A)
microbiome_B <- subset(microbiome_B, select = -c(count, taxon, parent, tax_rank))
str(microbiome_B)
microbiome_C <- subset(microbiome_C, select = -c(count, taxon, parent, tax_rank))
str(microbiome_C)
microbiome_AB <-merge(microbiome_A,microbiome_B,by="tax_name",all=TRUE)
microbiome_ABC <-merge(microbiome_AB,microbiome_C,by="tax_name",all=TRUE)
View(microbiome_AB)
View(microbiome_AB)
View(microbiome_ABC)
View(microbiome_AB)
View(microbiome_ABC)
library(plyr) # you may need to install this package if you haven't already done so
microbiome_ABC <- rename(microbiome_ABC, c("count_norm.x"="count_norm.A", "count_norm.y"="count_norm.B", "count_norm"="count_norm.C"))
str(microbiome_ABC)
View(microbiome_AB)
View(microbiome_ABC)
View(microbiome_A)
View(microbiome_AB)
View(microbiome_AB)
microbiome_ABC <-merge(microbiome_AB,microbiome_C,by="tax_name",all=TRUE)
View(microbiome_ABC)
microbiome_ABC <- rename(microbiome_ABC, c("count_norm.x"="count_norm.A"))
View(microbiome_ABC)
View(microbiome_ABC)
View(microbiome_AB)
microbiome_ABC <- rename(microbiome_ABC, c("count_norm.x"="count_norm.A"))
library(shiny)
runApp("/home/jlb/Software/shinyCircos-master", launch.browser = TRUE)
library(shiny)
runApp("/home/jlb/Software/shinyCircos-master", launch.browser = TRUE)
library(shiny)
runApp("/home/jlb/Software/shinyCircos-master", launch.browser = TRUE)
require(shinyjs)
require(shiny)
library(shiny)
runApp("/home/jlb/Software/shinyCircos-master", launch.browser = TRUE)
library(ggplot2)
library(tidyverse)
library(shiny)
require(shinyjs)
require(shiny)
library(shiny)
runApp("/home/jlb/Software/shinyCircos-master", launch.browser = TRUE)
1
require(shinyjs)
require(shiny)
library(shiny)
runApp("/home/jlb/Software/shinyCircos-master", launch.browser = TRUE)
install.packages("RCircos")
library(RCircos)
data(RCircos.Histogram.Data)
View(RCircos.Histogram.Data)
View(RCircos.Histogram.Data)
data(RCircos.Heatmap.Data)
data(RCircos.Link.Data)
RCircos.Chromosome.Ideogram.Plot()
data(UCSC.HG19.Human.CytoBandIdeogram)
data(UCSC.Mouse.GRCm38.CytoBandIdeogram)
data(UCSC.Baylor.3.4.Rat.cytoBandIdeogram)
chr.exclude <- NULL;
cyto.info <- UCSC.HG19.Human.CytoBandIdeogram;
tracks.inside <- 10;
tracks.outside <- 0;
RCircos.Set.Core.Components(cyto.info, chr.exclude,+tracks.inside, tracks.outside);
RCircos.Chromosome.Ideogram.Plot()
rcircos.params <- RCircos.Get.Plot.Parameters();
rcircos.cyto <- RCircos.Get.Plot.Ideogram();
rcircos.position <- RCircos.Get.Plot.Positions();
RCircos.List.Plot.Parameters()
rcircos.params <- RCircos.Get.Plot.Parameters();
rcircos.params$base.per.unit <- 3000;
RCircos.Reset.Plot.Parameters(rcircos.params);
RCircos.List.Plot.Parameters()
out.file <- "RCircosDemoHumanGenome.pdf";
pdf(file=out.file, height=8, width=8, compress=TRUE);
RCircos.Set.Plot.Area();
par(mai=c(0.25, 0.25, 0.25, 0.25));
plot.new();
plot.window(c(-2.5,2.5), c(-2.5, 2.5));
RCircos.Chromosome.Ideogram.Plot()
dev.off()
library(RCircos)
data(RCircos.Histogram.Data)
data(RCircos.Heatmap.Data)
data(RCircos.Link.Data)
data(UCSC.HG19.Human.CytoBandIdeogram)
data(UCSC.Mouse.GRCm38.CytoBandIdeogram)
data(UCSC.Baylor.3.4.Rat.cytoBandIdeogram)
chr.exclude <- NULL;
cyto.info <- UCSC.HG19.Human.CytoBandIdeogram;
tracks.inside <- 10;
tracks.outside <- 0;
RCircos.Set.Core.Components(cyto.info, chr.exclude,+tracks.inside, tracks.outside);
rcircos.params <- RCircos.Get.Plot.Parameters();
rcircos.cyto <- RCircos.Get.Plot.Ideogram();
rcircos.position <- RCircos.Get.Plot.Positions();
RCircos.List.Plot.Parameters()
rcircos.params <- RCircos.Get.Plot.Parameters();
rcircos.params$base.per.unit <- 3000;
RCircos.Reset.Plot.Parameters(rcircos.params);
RCircos.List.Plot.Parameters()
out.file <- "RCircosDemoHumanGenome.pdf";
pdf(file=out.file, height=8, width=8, compress=TRUE);
RCircos.Set.Plot.Area();
par(mai=c(0.25, 0.25, 0.25, 0.25));
plot.new();
plot.window(c(-2.5,2.5), c(-2.5, 2.5));
RCircos.Chromosome.Ideogram.Plot()
data(RCircos.Gene.Label.Data);
name.col <- 4;
side <- "in";
track.num <- 1;
RCircos.Gene.Connector.Plot(RCircos.Gene.Label.Data,
+ track.num, side);
track.num <- 2;
RCircos.Gene.Name.Plot(RCircos.Gene.Label.Data,
+ name.col,track.num, side)
data(RCircos.Heatmap.Data);
data.col <- 6;
track.num <- 5;
side <- "in";
RCircos.Heatmap.Plot(RCircos.Heatmap.Data, data.col,
+     track.num, side);> data(RCircos.Scatter.Data);
data.col <- 5;
track.num <- 6;
side <- "in";
by.fold <- 1;
RCircos.Scatter.Plot(RCircos.Scatter.Data, data.col,
+     track.num, side, by.fold);
data(RCircos.Line.Data);
data.col <- 5;
track.num <- 7;
side <- "in";
RCircos.Line.Plot(RCircos.Line.Data, data.col,
+     track.num, side);
data(RCircos.Histogram.Data);
data.col <- 4;
track.num <- 8;
side <- "in";
RCircos.Histogram.Plot(RCircos.Histogram.Data,
+     data.col, track.num, side);
data(RCircos.Tile.Data);
track.num <- 9;
side <- "in";
RCircos.Tile.Plot(RCircos.Tile.Data, track.num, side)
;
data(RCircos.Link.Data);
track.num <- 11;
RCircos.Link.Plot(RCircos.Link.Data, track.num, TRUE);
data(RCircos.Ribbon.Data);
RCircos.Ribbon.Plot(ribbon.data=RCircos.Ribbon.Data,
+     track.num=11, by.chromosome=FALSE, twist=FALSE);
dev.off()
demo("RCircos.Demo.Mouse.And.Rat")
require(shinyjs)
require(shiny)
library(shiny)
runApp("/home/jlb/Software/shinyCircos-master", launch.browser = TRUE)
require(shinyjs)
require(shiny)
library(shiny)
runApp("/home/jlb/Software/shinyCircos-master", launch.browser = TRUE)
runApp("/home/jlb/software/shinyCircos-master", launch.browser = TRUE)
runApp("/home/jlb/software/shinyCircos-master", launch.browser = TRUE)
RNA_levels<- c(7, 28, 100, 201, 208)
barplot(RNA_levels)
sh pwd
exit
quit()
install.packages("devtools")
packages <- c("dplyr", "tidyr", "devtools", "usethis", "roxygen2", "leaflet", "ggplot2", "DT", "scales", "shiny", "sf", "ggmap", "broom", "captioner")
for (package in packages) { if (!(package %in% installed.packages())) { install.packages(package) } }
R.version$verstion.string
R.version$version.string
RStudio.Version()$version
install.packages(c("dplyr", "jsonlite", "rmarkdown", "yaml"))
RStudio.Version()$version
RStudio.Version()$version
update.packages(ask=FALSE)
getwd()
list()
ls()
setwd("~/jlb@umass.edu/GoEcology/Research/GoEcology/2019_LTER_Synthesis/NCEAS_course")
knitr::opts_chunk$set(echo = TRUE)
x = 3
x
install.packages("texlive-luatex")
bg_chem <- read.csv("data/BGchem2008data.csv")
setwd("~/jlb@umass.edu/GoEcology/Research/GoEcology/2019_LTER_Synthesis/NCEAS_course")
bg_chem <- read.csv("data/BGchem2008data.csv")
bg_chem <- read.csv("BGchem2008data.csv")
getwd()
bg_chem <- read.csv("BGchem2008data.csv", stringsAsFactors = FALSE)
class(bg_chem)
mean(bg_chem$CTD_Temperature)
View(bg_chem)
View(bg_chem)
plot(bg_chem$CTD_Depth, bg_chem$CTD_Temperature)
My results showed a mean temp of `r mean(bg_chem$CTD_Temperature)'
My results showed a mean temp of `r mean(bg_chem$CTD_Temperature)'
My results showed a mean temp of `r mean(bg_chem$CTD_Temperature)`
plot(bg_chem$CTD_Depth, bg_chem$CTD_Temperature)
setwd("~/jlb@umass.edu/GoEcology/Courses/583-AdvGen/2020_Spring/labs")
SNP2 <- read.table("23andMe_complete.txt", header = TRUE, sep = "\t")
SNP2_table <- table(SNP_table_2$genotype)
SNP2_table <- table(SNP_table$genotype)
SNP2_table <- table(SNP2$genotype)
SNP2_table_A <- subset(SNP2_table, genotype == 'A')
SNP2_table_A
SNP2_table
SNP2_table_A <- subset(SNP2, genotype == 'A')
SNP2_table_A
table(SNP2_table_A)
SNP2_A <- subset(SNP2, genotype == 'A')
table(SNP2_A)
table(SNP2_A$genotype)
